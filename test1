import ssl
import socket
import datetime

def validate_certificate(url):
    try:
        # Validate using URL
        ip_address = None
        context = ssl.create_default_context()
        ip_address = socket.gethostbyname(url)
        with socket.create_connection((url, 443)) as sock:
            with context.wrap_socket(sock, server_hostname=url) as ssock:
                certificate = ssock.getpeercert()

        return certificate, ip_address

    except (socket.timeout, ssl.SSLError, ConnectionRefusedError):
        try:
            # Validate using server IP and port 443
            with socket.create_connection((ip_address, 443)) as sock:
                with context.wrap_socket(sock, server_hostname=url) as ssock:
                    certificate = ssock.getpeercert()

            return certificate, ip_address

        except (socket.timeout, ssl.SSLError, ConnectionRefusedError):
            try:
                # Validate using server IP and port 8443
                with socket.create_connection((ip_address, 8443)) as sock:
                    with context.wrap_socket(sock, server_hostname=url) as ssock:
                        certificate = ssock.getpeercert()

                return certificate, ip_address

            except (socket.timeout, ssl.SSLError, ConnectionRefusedError):
                return None, ip_address


def print_certificate_details(certificate,ip_address):

    if certificate is not None:
        subject = dict(x[0] for x in certificate['subject'])
        issuer = dict(x[0] for x in certificate['issuer'])
        not_before = datetime.datetime.strptime(certificate['notBefore'], "%b %d %H:%M:%S %Y %Z")
        not_after = datetime.datetime.strptime(certificate['notAfter'], "%b %d %H:%M:%S %Y %Z")

        print("Certificate Details:")
        print("---------------------")
        print("Subject:", subject)
        print("Issuer:", issuer)
        print("Not Before:", not_before)
        print("Not After:", not_after)
    else:
        print("Failed to validate certificate.")
    
    if ip_address is not None:
        print("IP Address:", ip_address)
    else:
        print("Failed to validate Server IP.")



# Example usage
url = "addfy.ca"
certificate, ipaddress = validate_certificate(url)
print_certificate_details(certificate,ipaddress)
